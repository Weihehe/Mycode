package com.Cartoonifier;

import android.content.Context;
import android.graphics.Bitmap;


import android.graphics.Bitmap.CompressFormat;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.MediaStore.Images;
import android.text.format.DateFormat;
import android.util.AttributeSet;
import android.util.Log;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;


import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ContentValues;
import android.content.Intent;


class CartoonifierView extends CartoonifierViewBase{
	private static final String TAG = "CartoonifierView";
	
	private int mFrameSize;
	private Bitmap mBitmap;

	
	
	private boolean bSaveThisFrame = false;
	private boolean bFreezeOutput = false;
	
	//冻结的时间
	private static final int FREEZE_OUTPUT_MSECS = 3000;
	private int[] mRGBA;
	private boolean m_nomalMode = true;
	private boolean m_sketchMode = false;
	private boolean m_alienMode = false;
	private boolean m_evilMode = false;
	private boolean m_artMode = false;
	private boolean m_blurMode = false;
	private boolean m_drawFace = false;
	//通知ID，可以在图片保存后通知我们消息
	private int mNotificationID = 0;
	
	 // Activity Context
	private Context mContext; 
	
	public CartoonifierView(Context context) {
        super(context);
    }
	public CartoonifierView(Context context, AttributeSet attrs){
        super(context,attrs);
    }
	//下一帧是否被存储
	protected void nextFrameShouldBeSaved(Context baseContext) {
		// TODO Auto-generated method stub
		bSaveThisFrame = true;
		mContext = baseContext;
	}
	//卡通图像和预览图像之间的切换
	protected Bitmap processFrame(byte[]data) {
		int[] rgba = mRGBA;
		//是否冻结。冻结图像时间
		if(bFreezeOutput)
		{
			bFreezeOutput = false;
			try
			{
				wait(FREEZE_OUTPUT_MSECS);
			}catch(InterruptedException e)
			{
				e.printStackTrace();
			}
			return null;
		}
		
		String baseFilename = "";
		if(!bSaveThisFrame)
		{
			if(m_alienMode)
				m_drawFace = true;
			if (m_sketchMode||m_alienMode||m_artMode) {
                CartoonifyImage(getFrameWidth(), getFrameHeight(), data, rgba, m_sketchMode, m_alienMode, m_evilMode,m_artMode,m_blurMode,m_drawFace);
            }
			else
				//将数据转化为rgba展示预览图像。不做处理
				ShowPreview(getFrameWidth(), getFrameHeight(), data, rgba);
			//CartoonifyImage(getFrameWidth(), getFrameHeight(), data, rgba, m_sketchMode, m_alienMode, m_evilMode);
		}
		else 
		{
			bSaveThisFrame = false;
			bFreezeOutput = true;
			m_drawFace = false;
			
			 SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd,HH-mm-ss");
	         String timestamp = s.format(new Date());
	         baseFilename = "Cartoon" + timestamp + ".png";
	         showNotificationMessage(mContext, baseFilename);
			
			
			//卡通图像的处理函数
	         if(!m_nomalMode)
	        	 CartoonifyImage(getFrameWidth(), getFrameHeight(), data, rgba, m_sketchMode, m_alienMode, m_evilMode,m_artMode,m_blurMode,m_drawFace);
	         else
	        	 ShowPreview(getFrameWidth(), getFrameHeight(), data, rgba); 
		}
		
		Bitmap bmp = mBitmap;
		bmp.setPixels(rgba, 0, getFrameWidth(),0,0,getFrameWidth(),getFrameHeight());
		
		if (bFreezeOutput) {
            //将图片存储在SD卡上
            savePNGImageToGallery(bmp, mContext, baseFilename);
        }
		
		
		return bmp;
	}
	
	//C++ native 函数声明
	public native void ShowPreview(int width, int height, byte[] yuv, int[] rgba);
    public native void CartoonifyImage(int width, int height, byte[] yuv, int[] rgba, boolean sketchMode, boolean alienMode, boolean evilMode,boolean artMode,boolean blurMode,boolean drawFace);
    
    //加在对象
    static {
        System.loadLibrary("jin_part");
    }

	@Override
	protected void onPreviewStarted(int previewWidth, int previewHeight) {
		// TODO Auto-generated method stub
		mFrameSize = previewHeight *previewWidth;
		mRGBA = new int[mFrameSize];
		//创建一个图片缓存
		mBitmap = Bitmap.createBitmap(previewWidth,previewHeight,Bitmap.Config.ARGB_8888);
	}

	@Override
	protected void onPreviewStopped() {
		// TODO Auto-generated method stub
		if(mBitmap!=null)
		{
			mBitmap.recycle();
			mBitmap = null;
		}
		mRGBA = null;
	}
	//通知消息 ,我们需要存储图像到相册
	protected void showNotificationMessage(Context context,String filename)
	{
		//在Android的状态栏弹出通知消息。为了确保通知显示每个图像只有1保持在一个时间的状态，用不同的ID，但在每次创建删除以前的信息。
		 final NotificationManager mgr = (NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
		
		if(mNotificationID > 0)
			mgr.cancel(mNotificationID);
		mNotificationID ++;
		
		Notification notification = new Notification(R.drawable.icon,"Saving to gallery(image"+mNotificationID+")..",System.currentTimeMillis());
		
		Intent intent = new Intent(context,CartoonifierView.class);
		//如果用户点击就关闭它
		notification.flags |= Notification.FLAG_AUTO_CANCEL;
		//延迟执行的intent
		PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);
		
		notification.setLatestEventInfo(context, "Cartoonifier saved " + mNotificationID + " images to Gallery", "Saved as '" + filename + "'", pendingIntent);
        mgr.notify(mNotificationID, notification);
	}
	
	//保存图像为png 存储到SD卡上，并显示在相册上
	protected void savePNGImageToGallery(Bitmap bmp, Context context, String baseFilename)
    {
        try {
            //得到SD卡的路径
            String baseFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath() + "/";
            File file = new File(baseFolder + baseFilename);
            Log.i(TAG, "Saving the processed image to file [" + file.getAbsolutePath() + "]");
        
            // 打开文件
            OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
            // 将图片保存到文件中
            bmp.compress(CompressFormat.PNG, 100, out);
            //刷新
            out.flush();    
            out.close();
        
            // 将图片加入相册中
            ContentValues image = new ContentValues();
            image.put(Images.Media.TITLE, baseFilename);
            image.put(Images.Media.DISPLAY_NAME, baseFilename);
            image.put(Images.Media.DESCRIPTION, "Processed by the Cartoonifier App");
            image.put(Images.Media.DATE_TAKEN, System.currentTimeMillis()); 
            image.put(Images.Media.MIME_TYPE, "image/png");
            image.put(Images.Media.ORIENTATION, 0);
            image.put(Images.Media.DATA, file.getAbsolutePath());
            Uri result = context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, image);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
	protected void toggleNomalMode() {
		m_nomalMode = true;
        m_sketchMode = false;
        m_alienMode = false;
        m_evilMode = false;
        m_artMode = false;
        m_blurMode = false;
    }
	protected void toggleCartoonMode() {
		m_nomalMode = false;
        m_sketchMode = false;
        m_alienMode = false;
        m_evilMode = false;
        m_artMode = false;
        m_blurMode = false;
    }
	protected void toggleSketchMode() {
		m_nomalMode = false;
		m_sketchMode = true;
        m_alienMode = false;
        m_evilMode = false;
        m_artMode = false;
        m_blurMode = false;
    }
    protected void toggleAlienMode() {
    	m_nomalMode = false;
    	m_sketchMode = false;
        m_alienMode = true;
        m_evilMode = false;
        m_artMode = false;
        m_blurMode = false;
    }
    protected void toggleEvilMode() {
    	m_nomalMode = false;
    	m_sketchMode = false;
        m_alienMode = false;
        m_evilMode = true;
        m_artMode = false;
        m_blurMode = false;
    }
    protected void toggleArtMode() {
    	m_nomalMode = false;
        m_sketchMode = false;
        m_alienMode = false;
        m_evilMode = false;
        m_artMode = true;
        m_blurMode = false;
    }
    protected void toggleBlurMode() {
    	m_nomalMode = false;
        m_sketchMode = false;
        m_alienMode = false;
        m_evilMode = false;
        m_artMode = false;
        m_blurMode = true;
    }
	
}
